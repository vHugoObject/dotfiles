#+auto_tangle: t

* org mode setting
** setup org mode with use package
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :after (use-package-ensure-system-package)
    :straight nil
    :mode ("\\.org\\'" . org-mode)
    :hook ((org-trigger . save-buffer)
	   (org-mode . flyspell-mode)
	   )
    :custom (org-todo-keywords
     '((sequence "TODO(t!)" "WAIT(w@/!)" "|" "DONE(d@!)" "CANCELED(c@)")))
    (org-treat-insert-todo-heading-as-state-change t "log TODO creation")
    (org-log-into-drawer "LOGBOOK" "log into LOGBOOK drawer")
    (org-log-done 'time)
    (org-startup-align-all-tables t)
    (org-startup-folded 'show2levels)
    )
#+end_src

** setup autotangle mode
#+begin_src emacs-lisp :tangle yes
  (use-package org-auto-tangle
    :after (org)
    :hook (org-mode . org-auto-tangle-mode)
    )
#+end_src

** customize org-table
#+begin_src emacs-lisp :tangle yes
  (use-package org-table
    :after (org)
    :straight (:type built-in)
    :custom (org-table-duration-custom-format 'hh:mm "format for the output of calc computations")
   )
#+end_src

** customize org-attach
#+begin_src emacs-lisp :tangle yes
  (use-package org-attach
    :after (org)
    :straight (:type built-in)
    :custom (org-attach-method 'l "set symbolic link as a default attachment method")
   )
#+end_src

** customize org-clock
#+begin_src emacs-lisp :tangle yes
  (use-package org-clock
    :after (org)
    :straight (:type built-in)
    :custom (org-clock-clocked-in-display 'both  "display clock in both mode-line and frame-title")
	  (org-clock-persist t "save the running clock when emacs is closed")
   )
#+end_src

** customize org-duration
#+begin_src emacs-lisp :tangle yes
  (use-package org-duration
    :after (org)
    :straight (:type built-in)
    :custom (org-duration-format (quote h:mm) "Duration format will always be hours:minutes")
   )
#+end_src

** customize org-habit
#+begin_src emacs-lisp :tangle yes
  (use-package org-habit
    :straight (:type built-in)
    :custom (add-to-list 'org-modules "org-habit" "add habits to org-modules")
   )
#+end_src

** customize org-babel
#+begin_src emacs-lisp :tangle yes
  (defun my-org-confirm-babel-evaluate (lang body)
    "Custom function for org-confirm-babel. Contains of
     a set of functions that don't need confirmation
     for evaluation"
    (let ((langs (list "elisp" "emacs-lisp"
		       "zsh" "sh"
		       "shell" "gnuplot"
		       "sqlite" "sqlite3"
		       )))
      (not (member lang langs))      
      )
    )
  (use-package ob-core
    :after (org)
    :straight (:type built-in)
    :config (org-babel-do-load-languages
	      'org-babel-load-languages (quote ((emacs-lisp . t)
						(sqlite . t)
						(shell . t))))
    :custom ((org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)	     	     
	     )

   )


#+end_src

** customize org-capture
#+begin_src emacs-lisp :tangle yes
  (load "~/.emacs.d/init-files/org-capture-templates")
    (use-package org-capture
      :after (org)
      :straight (:type built-in)
      :custom (org-capture-templates org-capture-templates)
      )
#+end_src   

** setup org-pomodoro
#+begin_src emacs-lisp :tangle yes
  (use-package org-pomodoro
    :after (org)
    :commands (org-pomodoro)
    :bind ("M-C-o" . org-pomodoro)
    ;; autosave on pomodorro finish
    :hook ((org-pomodoro-finished . save-buffer)
	   (org-pomodoro-started . save-buffer)
	   (org-pomodoro-break-finished . save-buffer)
	   )
    :custom
     (org-pomodoro-length 20)
     (org-pomodoro-short-break-length 5)
     (org-pomodoro-clock-break t)
     (org-pomodoro-long-break-length 15)
     (org-pomodoro-manual-break t)
     )
#+end_src   

