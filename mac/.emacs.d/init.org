#+auto_tangle: t

* startup package management
** add init files to path
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/init-files")
#+end_src

** load package-management
#+begin_src elisp :tangle yes
  (load "~/.emacs.d/init-files/package-management")
#+end_src


* emacs housekeeping
** options
#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode 1)
  (line-number-mode 1)
  (column-number-mode 1)  
  (setopt warning-minimum-level :emergency)
  (setopt inhibit-startup-message t)
  
      (setopt create-lockfiles nil)
      ;; don't ask for confirmation when opening symlinked file
      (setopt vc-follow-symlinks t)
      ;; for tramp
      (setopt vc-handled-backends '(SVN Git))
      (setopt remote-file-name-inhibit-locks t)
#+end_src

** force buffer menu to always open in other window
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-x C-b") 'buffer-menu-other-window)
#+end_src

** custom function to quickly kill emacs
#+begin_src emacs-lisp :tangle yes
  (defun my-kill-emacs ()
  "save some buffers, then exit unconditionally"
  (interactive)
  (save-some-buffers nil t)
  (kill-emacs))
  ;; create a keymap with new function
  (global-set-key (kbd "C-x C-c") 'my-kill-emacs)
#+end_src

** prevent custom edit from adding settings to init.el
#+begin_src emacs-lisp :tangle yes
  (use-package cus-edit
    :straight (:type built-in)
    :custom
    (custom-file null-device "Don't store customizations"))			 
#+end_src

** initial frame size
#+begin_src emacs-lisp :tangle yes
  (use-package frame
    :straight (:type built-in)
    :custom
    (initial-frame-alist
	 '((top . 1) (left . 1) (width . 200) (height . 60)))
   )
#+end_src

** customize dired
#+begin_src emacs-lisp :tangle yes
  (use-package dired
    :straight (:type built-in)
    :hook (dired-mode . (lambda ()
	      (define-key dired-mode-map
		(kbd "C-c C-x a")
		#'org-attach-dired-to-subtree)))
    :custom ((dired-recursive-deletes t)
	     (dired-vc-rename-file t)
	     (dired-create-destination-dirs 'ask)
	     )	     
   )
#+end_src


* load all files in init files
#+begin_src elisp :tangle yes

  (cl-flet (
	  (memberp (file-list file-name)
	    (member file-name file-list)
	    )
	  )    
    (let* (
	 (file-path "~/.emacs.d/init-files")
	 (ignore '("~/.emacs.d/init-files/package-management"))
	 (file-regex "\.org$")
	 (first-list (directory-files file-path nil file-regex))
	 (second-list (mapcar (lambda (item)
			      (concat file-path "/" (string-remove-suffix ".org" item))
			      )
			    first-list))
	 (file-list
	  (seq-remove (apply-partially #'memberp ignore) second-list))
		     )
     (mapc (lambda (file) (load file))	     
	   file-list)
     )
    )

#+end_src




