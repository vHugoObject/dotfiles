#+auto_tangle: t

* emacs housekeeping
#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode 1)
  (line-number-mode 1)
  (column-number-mode 1)
  
#+end_src

** options
#+begin_src emacs-lisp :tangle yes
  (setopt warning-minimum-level :emergency)
  (setopt inhibit-startup-message t)
  
      (setopt create-lockfiles nil)
      ;; don't ask for confirmation when opening symlinked file
      (setopt vc-follow-symlinks t)
      ;; for tramp
      (setopt vc-handled-backends '(SVN Git))
      (setopt remote-file-name-inhibit-locks t)
#+end_src

** force buffer menu to always open in other window
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-x C-b") 'buffer-menu-other-window)
#+end_src

** custom function to quickly kill emacs
#+begin_src emacs-lisp :tangle yes
  (defun my-kill-emacs ()
  "save some buffers, then exit unconditionally"
  (interactive)
  (save-some-buffers nil t)
  (kill-emacs))
  ;; create a keymap with new function
  (global-set-key (kbd "C-x C-c") 'my-kill-emacs)
#+end_src

** prevent custom edit from adding settings to init.el
#+begin_src emacs-lisp :tangle yes
(use-package cus-edit
  :custom
  (custom-file null-device "Don't store customizations"))			 
#+end_src

** initial frame size
#+begin_src emacs-lisp :tangle yes
(use-package frame
  :custom
  (initial-frame-alist
       '((top . 1) (left . 1) (width . 200) (height . 60)))
 )
#+end_src

** customize dired
#+begin_src emacs-lisp :tangle yes
  (use-package dired
    :hook (dired-mode . (lambda ()
	      (define-key dired-mode-map
		(kbd "C-c C-x a")
		#'org-attach-dired-to-subtree)))
    :custom ((dired-recursive-deletes t)
	     (dired-vc-rename-file t)
	     (dired-create-destination-dirs 'ask)
	     )	     
   )
#+end_src



* package settings
** setup use-package
#+begin_src emacs-lisp :tangle yes
  (eval-when-compile
    (require 'use-package))
(use-package use-package-ensure-system-package :ensure t)
#+end_src

** setup package sources
#+begin_src emacs-lisp :tangle yes
(use-package package
  :custom
  (package-enable-at-startup nil)
	  (package-archives '(("org"       . "http://orgmode.org/elpa/")
                         ("gnu"       . "http://elpa.gnu.org/packages/")
                         ("melpa"     . "https://melpa.org/packages/")))  				     )

#+end_src

** setup autotangle mode
#+begin_src emacs-lisp :tangle yes
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
       )
#+end_src

** add init files to path
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/.emacs.d/init-files")
#+end_src

* Load init files
** load org-mode settings
#+begin_src emacs-lisp :tangle yes
  (use-package org-mode-settings)
#+end_src
** load custom functions for org-tables
#+begin_src emacs-lisp :tangle yes
  (use-package org-table-custom-functions)
  (use-package org-table-custom-functions-tests)
#+end_src


* language specific modes
** setup lsp-mode
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
      :hook ((typescript-mode . lsp-deferred)
	     (rust-mode . lsp-deferred)
	     )
      :commands (lsp lsp-deferred)
      :custom (lsp-enable-snippet nil)
      )

#+end_src

** rust mode
#+begin_src emacs-lisp :tangle yes
;; only load rust-mode when needed
(use-package rust-mode
  :mode "\\.rs\\'"
)
#+end_src

** javascript mode
#+begin_src emacs-lisp :tangle yes
(use-package js-mode
  :mode ( "\\.js\\'" "\\.mjs\\'")
)
#+end_src

** html mode
#+begin_src emacs-lisp :tangle yes
(use-package web-mode

  :mode ("\\.html?\\'" "\\.tsx\\'" "\\.jsx\\'")
  :custom (web-mode-enable current-element-highlight t)
)
#+end_src

** typescript mode
#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
:mode "\\.ts\\'")
#+end_src

** setup flycheck
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
:hook (typescript-mode js-mode web-mode-enable)
:custom (flycheck-add-mode 'javascript-eslint 'web-mode)
)
#+end_src


* miscellaneous 
** spray-mode for reading
#+begin_src emacs-lisp :tangle yes
(use-package spray
  :bind ("C-<f6>" . spray-mode)
  :mode ("\\.epub\\'" "\\.txt\\'")
  :custom ((spray-margin-left 80)
	   (spray-margin-top 5)
	   (set-frame-font "Iosevka Extended 12" nil t)
	   )
  )
#+end_src

** setup magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :ensure t
  :bind (("C-c C-g" . magit-status)
        ("C-c p" . magit-push-to-remote)
	 )
 )
#+end_src

** setup codespaces.el
#+begin_src emacs-lisp :tangle yes
  (use-package codespaces
    :ensure-system-package gh
    :config (codespaces-setup)
    :bind ("C-c S" . #'codespaces-connect)
    )

#+end_src
